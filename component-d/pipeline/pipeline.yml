---
# Declare YAML anchors to reuse later in the YAML document.
# This helps reducing bloat in YAML files by removing code duplication.
# See: https://docs.cycloid.io/deploy/stackforms/advanced.html#yaml-anchors-and-aliases
definitions:
  tasks:
    # The task producing a configured stack, merging stack and config.
  - &task-merge-stack-and-config
    task: "merge-stack-and-config"
    tags: ["fred"]
    config:
      platform: "linux"
      image_resource:
        type: "registry-image"
        source:
          repository: "cycloid/cycloid-toolkit"
          tag: "latest"
      run:
        path: "/usr/bin/merge-stack-and-config"
      inputs:
      - name: "git_config"
        path: "config"
      - name: "git_stack"
        path: "stack"
      outputs:
      - name: "merged-stack"
        path: "merged-stack"
    params:
      CONFIG_PATH: "($ .project $)/($ .environment $)/($ .component $)/terraform/"
      STACK_PATH: "($ .stack_path $)/terraform"

# Declare Concourse resource types to determine versions and sources to use in the pipeline.
# See: https://concourse-ci.org/resource-types.html
resource_types:
- name: "terraform"
  type: "registry-image"
  tags:
  - "fred"
  source:
    repository: "cycloid/terraform-resource"
    tag: "1.8.2"

- name: "cycloid-toolkit"
  type: "registry-image"
  tags: ["fred"]
  source:
    repository: "cycloid/cycloid-toolkit"
    tag: "latest"

# Declare resources to be invoked later in jobs.
resources:
- name: "cycloid-toolkit"
  type: "registry-image"
  tags: ["fred"]
  source:
    repository: "cycloid/cycloid-toolkit"
    tag: "latest"

# The Terraform Concourse resource to manage infrastructure via Terraform.
# See: https://github.com/cycloidio/terraform-resource#source-configuration
- name: "tfstate"
  type: "terraform"
  icon: "terraform"
  tags: ["fred"]
  source:
    # Use Cycloid Terraform HTTP backend.
    backend_type: "http"
    backend_config:
      address: "($ .api_url $)/inventory?jwt=($ .inventory_jwt $)"
      skip_cert_verification: true
    env_name: "($ .environment $)"
    vars:
      component: "($ .component $)"
      env: "($ .environment $)"
      project: "($ .project $)"
      org: "($ .organization_canonical $)"

# The Terraform stack (will be merged with the config).
- name: "git_stack"
  type: "git"
  icon: "github-circle"
  tags: ["fred"]
  source:
    uri: "($ .scs_url $)"
    branch: "($ .scs_branch $)"
    # Stack templating examples:
    # https://docs.cycloid.io/reference/stack/concepts/templating/
    ($- if eq .env "prod" $)
    private_key: "((($ .scs_cred_path $).ssh_key))"
    # Include only the Terraform files in the specified directory.
    paths:
    - ($ .stack_path $)/terraform/*

# The Terraform config (will be merged with the stack).
- name: "git_config"
  type: "git"
  icon: "github-circle"
  tags: ["fred"]
  source:
    uri: "($ .cr_url $)"
    branch: "($ .cr_branch $)"
    private_key: "((($ .cr_cred_path $).ssh_key))"
    # Include only the Terraform files in the specified directory.
    paths:
    - ($ .project $)/($ .environment $)/($ .component $)/terraform/*

# Define jobs that form the pipeline
jobs:
- name: "test-vars"
  plan:
  - get: "git_stack"
    trigger: true
    tags: ["fred"]
  - get: "git_config"
    trigger: true
    tags: ["fred"]
  - *task-merge-stack-and-config
  - get: "cycloid-toolkit"
    tags: ["fred"]
  - task: "print-special-vars"
    file:
    image: "cycloid-toolkit"
    tags: ["fred"]
    config:
      platform: "linux"
      tags: ["fred"]
      run:
        path: "/bin/bash"
        args:
        - "-xc"
        - |
          echo "project: ($ .project $)"
          echo "environment: ($ .environment $)"
          echo "component: ($ .component $)"
          echo "project_owner_canonical: ($ .project_owner_canonical $)"
          echo "project_owner_name: ($ .project_owner_name $)"
          echo "project_owner_surname: ($ .project_owner_surname $)"
          echo "project_owner_email: ($ .project_owner_email $)"
          echo "organization_canonical: ($ .organization_canonical $)"
          echo "scs_url: ($ .scs_url $)"
          echo "scs_branch: ($ .scs_branch $)"
          echo "scs_cred_type: ($ .scs_cred_type $)"
          echo "scs_cred_path: ($ .scs_cred_path $)"
          echo "stack_path: ($ .stack_path $)"
          echo "cr_url: ($ .cr_url $)"
          echo "cr_branch: ($ .cr_branch $)"
          echo "cr_cred_type: ($ .cr_cred_type $)"
          echo "cr_cred_path: ($ .cr_cred_path $)"
          echo "inventory_jwt: ($ .inventory_jwt $)"
          echo "api_url: ($ .api_url $)""
          echo "console_url: ($ .console_url $)"
          echo "use_case: ($ .use_case $)"
          ls */*

- name: "terraform-plan"
  serial: true
  serial_groups:
  - "terraform"
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
  - do:
    - get: "git_stack"
      trigger: true
      tags: ["fred"]
    - get: "git_config"
      trigger: true
      tags: ["fred"]
    - *task-merge-stack-and-config
    - put: "tfstate"
      tags: ["fred"]
      params:
        plan_only: true
        terraform_source: "merged-stack/"

- name: "terraform-apply"
  serial: true
  serial_groups:
  - "terraform"
  build_logs_to_retain: 10
  plan:
  - do:
    - get: "git_stack"
      trigger: false
      tags: ["fred"]
      passed:
      - "terraform-plan"
    - get: "git_config"
      trigger: false
      tags: ["fred"]
      passed:
      - "terraform-plan"
    - get: "tfstate"
      trigger: false
      tags: ["fred"]
      passed:
      - "terraform-plan"
    - *task-merge-stack-and-config
    - put: "tfstate"
      tags: ["fred"]
      params:
        plan_run: true
        terraform_source: "merged-stack/"

- name: "terraform-destroy"
  serial: true
  serial_groups:
  - "terraform"
  build_logs_to_retain: 10
  plan:
  - do:
    - get: "git_stack"
      trigger: false
      tags: ["fred"]
    - get: "git_config"
      trigger: false
      tags: ["fred"]
    - *task-merge-stack-and-config
    - put: "tfstate"
      tags: ["fred"]
      params:
        action: "destroy"
        terraform_source: "merged-stack/"
      get_params:
        action: "destroy"

# Organize jobs into groups.
# See: https://concourse-ci.org/pipelines.html#schema.pipeline.groups
groups:
- name: "overview"
  jobs:
  - "test-vars"
  - "terraform-plan"
  - "terraform-apply"
- name: "destroy"
  jobs:
  - "terraform-destroy"
